// Sample.cpp : Defines the entry point for the console application.
//

#include <chrono>
#include <iostream>
#include <tchar.h>

#include "HandleInput.h"
#include "CpuUsage.h"
#include "Razer\ChromaSDKPluginTypes.h"
#include "Razer\ChromaAnimationAPI.h"
#include "RazerKeyboardMapping.h"

using namespace std;
using namespace std::chrono;
using namespace ChromaSDK;

const float MATH_PI = 3.14159f;

#pragma region Autogenerated
void ShowEffect1()
{
	const wchar_t* baseLayer = L"Animations/Blank_Keyboard.chroma";
	const wchar_t* layer2 = L"GameSampleAnimations/Title_Keyboard.chroma";
	const wchar_t* layer3 = L"Animations/BlackAndWhiteRainbow_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::CloseAnimationName(layer2);
	ChromaAnimationAPI::CloseAnimationName(layer3);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::GetAnimation(layer2);
	ChromaAnimationAPI::GetAnimation(layer3);
	ChromaAnimationAPI::ReduceFramesName(layer2, 2);
	int frameCount = ChromaAnimationAPI::GetFrameCountName(layer2);
	ChromaAnimationAPI::MakeBlankFramesName(baseLayer, frameCount, 0.1f, 0);
	int color1 = ChromaAnimationAPI::GetRGB(0, 255, 255);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 255);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(layer3, color1, color2);
	ChromaAnimationAPI::CopyNonZeroTargetAllKeysAllFramesName(layer3, layer2);
	ChromaAnimationAPI::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
	int keys[] = {
	 Keyboard::RZKEY::RZKEY_W,
	 Keyboard::RZKEY::RZKEY_A,
	 Keyboard::RZKEY::RZKEY_S,
	 Keyboard::RZKEY::RZKEY_D,
	};
	int color = ChromaAnimationAPI::GetRGB(255, 255, 0);
	ChromaAnimationAPI::SetKeysColorAllFramesName(baseLayer, keys, (int)size(keys), color);
	ChromaAnimationAPI::FillZeroColorAllFramesRGBName(baseLayer, 32, 0, 32);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect1ChromaLink()
{
	const wchar_t* baseLayer = L"Animations/BlackAndWhiteRainbow_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color1 = ChromaAnimationAPI::GetRGB(0, 255, 255);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 255);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect1Headset()
{
	const wchar_t* baseLayer = L"Animations/BlackAndWhiteRainbow_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color1 = ChromaAnimationAPI::GetRGB(0, 255, 255);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 255);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect1Mousepad()
{
	const wchar_t* baseLayer = L"Animations/BlackAndWhiteRainbow_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color1 = ChromaAnimationAPI::GetRGB(0, 255, 255);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 255);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect1Mouse()
{
	const wchar_t* baseLayer = L"Animations/BlackAndWhiteRainbow_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color1 = ChromaAnimationAPI::GetRGB(0, 255, 255);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 255);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect1Keypad()
{
	const wchar_t* baseLayer = L"Animations/BlackAndWhiteRainbow_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color1 = ChromaAnimationAPI::GetRGB(0, 255, 255);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 255);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect2()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect2_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect2ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect2_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect2Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect2_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect2Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect2_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect2Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect2_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect2Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect2_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect3()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect3_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect3ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect3_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect3Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect3_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect3Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect3_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect3Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect3_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect3Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect3_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect4()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect4_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect4ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect4_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect4Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect4_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect4Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect4_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect4Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect4_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect4Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect4_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect5()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect5_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect5ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect5_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect5Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect5_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect5Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect5_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect5Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect5_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect5Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect5_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect6()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect6_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color = ChromaAnimationAPI::GetRGB(182, 133, 255);
	ChromaAnimationAPI::MultiplyIntensityColorAllFramesName(baseLayer, color);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect6ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect6_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color = ChromaAnimationAPI::GetRGB(182, 133, 255);
	ChromaAnimationAPI::MultiplyIntensityColorAllFramesName(baseLayer, color);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect6Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect6_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color = ChromaAnimationAPI::GetRGB(182, 133, 255);
	ChromaAnimationAPI::MultiplyIntensityColorAllFramesName(baseLayer, color);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect6Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect6_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color = ChromaAnimationAPI::GetRGB(182, 133, 255);
	ChromaAnimationAPI::MultiplyIntensityColorAllFramesName(baseLayer, color);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect6Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect6_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color = ChromaAnimationAPI::GetRGB(182, 133, 255);
	ChromaAnimationAPI::MultiplyIntensityColorAllFramesName(baseLayer, color);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect6Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect6_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color = ChromaAnimationAPI::GetRGB(182, 133, 255);
	ChromaAnimationAPI::MultiplyIntensityColorAllFramesName(baseLayer, color);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect7()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect7_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect7ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect7_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect7Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect7_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect7Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect7_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect7Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect7_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect7Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect7_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect8()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect8_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect8ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect8_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect8Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect8_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect8Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect8_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect8Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect8_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect8Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect8_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect9()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect9_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect9ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect9_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect9Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect9_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect9Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect9_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect9Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect9_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect9Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect9_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect10()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect10_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect10ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect10_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect10Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect10_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect10Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect10_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect10Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect10_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect10Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect10_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect11()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect11_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color1 = ChromaAnimationAPI::GetRGB(69, 12, 69);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect11ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect11_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color1 = ChromaAnimationAPI::GetRGB(69, 12, 69);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect11Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect11_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color1 = ChromaAnimationAPI::GetRGB(69, 12, 69);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect11Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect11_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color1 = ChromaAnimationAPI::GetRGB(69, 12, 69);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect11Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect11_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color1 = ChromaAnimationAPI::GetRGB(69, 12, 69);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect11Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect11_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::ReduceFramesName(baseLayer, 2);
	int color1 = ChromaAnimationAPI::GetRGB(69, 12, 69);
	int color2 = ChromaAnimationAPI::GetRGB(255, 255, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect12()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect12_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect12ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect12_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect12Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect12_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect12Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect12_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect12Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect12_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect12Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect12_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect13()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect13_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::DuplicateFramesName(baseLayer);
	int color1 = ChromaAnimationAPI::GetRGB(0, 0, 0);
	int color2 = ChromaAnimationAPI::GetRGB(204, 204, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect13ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect13_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::DuplicateFramesName(baseLayer);
	int color1 = ChromaAnimationAPI::GetRGB(0, 0, 0);
	int color2 = ChromaAnimationAPI::GetRGB(204, 204, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect13Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect13_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::DuplicateFramesName(baseLayer);
	int color1 = ChromaAnimationAPI::GetRGB(0, 0, 0);
	int color2 = ChromaAnimationAPI::GetRGB(204, 204, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect13Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect13_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::DuplicateFramesName(baseLayer);
	int color1 = ChromaAnimationAPI::GetRGB(0, 0, 0);
	int color2 = ChromaAnimationAPI::GetRGB(204, 204, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect13Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect13_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::DuplicateFramesName(baseLayer);
	int color1 = ChromaAnimationAPI::GetRGB(0, 0, 0);
	int color2 = ChromaAnimationAPI::GetRGB(204, 204, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect13Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect13_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::DuplicateFramesName(baseLayer);
	int color1 = ChromaAnimationAPI::GetRGB(0, 0, 0);
	int color2 = ChromaAnimationAPI::GetRGB(204, 204, 0);
	ChromaAnimationAPI::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect14()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect14_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect14ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect14_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect14Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect14_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect14Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect14_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect14Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect14_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect14Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect14_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect15()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect15_Keyboard.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::SetChromaCustomFlagName(baseLayer, true);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect15ChromaLink()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect15_ChromaLink.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect15Headset()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect15_Headset.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect15Mousepad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect15_Mousepad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect15Mouse()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect15_Mouse.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
void ShowEffect15Keypad()
{
	const wchar_t* baseLayer = L"GameSampleAnimations/Effect15_Keypad.chroma";
	ChromaAnimationAPI::CloseAnimationName(baseLayer);
	ChromaAnimationAPI::GetAnimation(baseLayer);
	ChromaAnimationAPI::OverrideFrameDurationName(baseLayer, 0.033f);
	ChromaAnimationAPI::PlayAnimationName(baseLayer, true);
}
#pragma endregion


int _gSelection = 1;
const int MAX_SELECTION = 15;
int _gIndex = 0;
char _gTextBuffer[16];
char _gManualInput[] = {
	' ',
	' ',
};

char _gShortcode[7] = { 0 };
char _gStreamId[48] = { 0 };
char _gStreamKey[48] = { 0 };
unsigned char _gLenShortcode = 0;
unsigned char _gLenStreamId = 0;
unsigned char _gLenStreamKey = 0;

const char* g_FocusGuid = "UnitTest";
char g_Focus[48] = { 0 };
unsigned char g_LenFocus = 0;

const char* IsSelected()
{
	++_gIndex;
	if (_gIndex == _gSelection)
	{
		return "*";
	}
	else
	{
        if (_gIndex <= 0)
        {
            return " ";
        }
		memset(_gTextBuffer, 0, size(_gTextBuffer));
		sprintf_s(_gTextBuffer, "%d", _gIndex);
		return _gTextBuffer;
	}
}

CpuUsage _gUsage;

void PrintLegend(bool supportsStreaming, BYTE platform)
{
	for (int i = 0; i < 25; ++i)
	{
		fprintf(stdout, "\r\n");
	}

	fprintf(stdout, "C++ CHROMA GAME SAMPLE APP\r\n");
	fprintf(stdout, "\r\n");

	fprintf(stdout, "Use UP and DOWN arrows to select animation and press ENTER.\r\n");
	if (supportsStreaming)
	{
		fprintf(stdout, "Use `P` to switch streaming platforms. ");
	}
    fprintf(stdout, "Use ESCAPE to QUIT.\r\n");

    if (supportsStreaming)
    {
        fprintf(stdout, "Streaming Info (SUPPORTED):\r\n");
		ChromaSDK::Stream::StreamStatusType status = ChromaAnimationAPI::CoreStreamGetStatus();
		fprintf(stdout, "Status: %s\r\n", ChromaAnimationAPI::CoreStreamGetStatusString(status));
        if (_gLenShortcode > 0)
        {
            fprintf(stdout, "Shortcode: %s\r\n", _gShortcode);
        }
        if (_gLenStreamId > 0)
        {
            fprintf(stdout, "StreamId: %s\r\n", _gStreamId);
        }
        if (_gLenStreamKey > 0)
        {
            fprintf(stdout, "StreamKey: %s\r\n", _gStreamKey);
        }
        if (g_LenFocus > 0)
        {
            fprintf(stdout, "Focus: %s\r\n", g_Focus);
        }

        short cpuUsage = _gUsage.GetUsage();
        cout << "CPU usage: " << cpuUsage << "%" << endl;

        fprintf(stdout, "\r\n");
    }
    

    if (supportsStreaming)
    {
        _gIndex = -10;
		fprintf(stdout, "[%s] Request Shortcode for Platform: ", IsSelected());

		switch (platform)
		{
		case 0:
			fprintf(stdout, "Windows PC (PC)\r\n");
			break;
		case 1:
			fprintf(stdout, "Windows Cloud (LUNA)\r\n");
			break;
		case 2:
			fprintf(stdout, "Windows Cloud (GEFORCE NOW)\r\n");
			break;
		case 3:
			fprintf(stdout, "Windows Cloud (GAME PASS)\r\n");
			break;
		}

        fprintf(stdout, "[%s] Request StreamId\r\n", IsSelected());
        fprintf(stdout, "[%s] Request StreamKey\r\n", IsSelected());
        fprintf(stdout, "[%s] Release Shortcode\r\n", IsSelected());
        fprintf(stdout, "[%s] Broadcast\t\t", IsSelected());
        fprintf(stdout, "[%s] BroadcastEnd\r\n", IsSelected());
        fprintf(stdout, "[%s] Watch\t\t", IsSelected());
        fprintf(stdout, "[%s] WatchEnd\r\n", IsSelected());
        fprintf(stdout, "[%s] GetFocus\t\t", IsSelected());
        fprintf(stdout, "[%s] SetFocus\r\n", IsSelected());
    }
    else
    {
        _gIndex = 0;
    }
    for (int effect = 1; effect <= MAX_SELECTION; ++effect)
    {
        fprintf(stdout, "[%s] Effect %d", IsSelected(), effect);
        if (effect % 5 == 0 ||
            effect == MAX_SELECTION)
        {
            fprintf(stdout, "\r\n");
        }
        else
        {
            fprintf(stdout, "\t\t");
        }
    }	

	fprintf(stdout, "\r\n");
	fprintf(stdout, "\r\n");
    if (_gSelection > 0)
    {
        fprintf(stdout, "[%d] Press ENTER to play selection. ", _gSelection);
    }
    else
    {
        fprintf(stdout, "[ ] Press ENTER to play selection. ");
    }

	fprintf(stdout, "\r\n");
	if (_gManualInput[0] != ' ')
	{
		fprintf(stdout, "%c", _gManualInput[0]);
		if (_gManualInput[1] != ' ')
		{
			fprintf(stdout, "%c", _gManualInput[1]);
		}
		fprintf(stdout, "\r\n");
	}
}

void ClearManualInput()
{
	_gManualInput[0] = ' ';
	_gManualInput[1] = ' ';
}

void ExecuteEffect(bool supportsStreaming, BYTE platform);

void Cleanup()
{
	if (ChromaAnimationAPI::GetIsInitializedAPI())
	{
		if (ChromaAnimationAPI::IsInitialized())
		{
			ChromaAnimationAPI::StopAll();
			ChromaAnimationAPI::CloseAll();
			RZRESULT result = ChromaAnimationAPI::Uninit();
			ChromaAnimationAPI::UninitAPI();
			if (result != RZRESULT_SUCCESS)
			{
				cerr << "Failed to uninitialize Chroma!" << endl;
				exit(1);
			}
		}
	}
}

int main()
{
    fprintf(stderr, "App launched!\r\n");
    if (ChromaAnimationAPI::InitAPI() != RZRESULT_SUCCESS)
    {
        return -1;
    }

    ChromaSDK::APPINFOTYPE appInfo = {};

    _tcscpy_s(appInfo.Title, 256, _T("C++ Game Sample Application"));
    _tcscpy_s(appInfo.Description, 1024, _T("A sample application using Razer Chroma SDK"));
    _tcscpy_s(appInfo.Author.Name, 256, _T("Razer"));
    _tcscpy_s(appInfo.Author.Contact, 256, _T("https://developer.razer.com/chroma"));

    //appInfo.SupportedDevice = 
    //    0x01 | // Keyboards
    //    0x02 | // Mice
    //    0x04 | // Headset
    //    0x08 | // Mousepads
    //    0x10 | // Keypads
    //    0x20   // ChromaLink devices
    appInfo.SupportedDevice = (0x01 | 0x02 | 0x04 | 0x08 | 0x10 | 0x20);
    //    0x01 | // Utility. (To specifiy this is an utility application)
    //    0x02   // Game. (To specifiy this is a game);
    appInfo.Category = 1;

	RZRESULT result = ChromaAnimationAPI::InitSDK(&appInfo);
	if (result != RZRESULT_SUCCESS)
	{
		cerr << "Failed to initialize Chroma!" << endl;
		ChromaAnimationAPI::UninitAPI();
		exit(1);
	}
	Sleep(100); //wait for init

	bool supportsStreaming = ChromaAnimationAPI::CoreStreamSupportsStreaming();

    if (supportsStreaming)
    {
        _gSelection = -9;
    }

    // sample for getting the mapping between potential UI key binding enums and RZKEY
    RazerKeyboardMapping* mapping = RazerKeyboardMapping::GetInstance();
    int key = mapping->GetRZKEY(2);

    HandleInput numKeys[] =
    {
        HandleInput('0'),
        HandleInput('1'),
        HandleInput('2'),
        HandleInput('3'),
        HandleInput('4'),
        HandleInput('5'),
        HandleInput('6'),
        HandleInput('7'),
        HandleInput('8'),
        HandleInput('9'),
    };

    HandleInput numpadKeys[] =
    {
        HandleInput(VK_NUMPAD0),
        HandleInput(VK_NUMPAD1),
        HandleInput(VK_NUMPAD2),
        HandleInput(VK_NUMPAD3),
        HandleInput(VK_NUMPAD4),
        HandleInput(VK_NUMPAD5),
        HandleInput(VK_NUMPAD6),
        HandleInput(VK_NUMPAD7),
        HandleInput(VK_NUMPAD8),
        HandleInput(VK_NUMPAD9),
    };

	BYTE platform = 0;

    PrintLegend(supportsStreaming, platform);
    HandleInput inputUp = HandleInput(VK_UP);
    HandleInput inputDown = HandleInput(VK_DOWN);
    HandleInput inputBackspace = HandleInput(VK_BACK);
    HandleInput inputEnter = HandleInput(VK_RETURN);
	HandleInput inputPlatform = HandleInput('P');
    HandleInput inputEscape = HandleInput(VK_ESCAPE);

    int autoPrint = 0;

    while (true)
    {
        if (++autoPrint > 100)
        {
            autoPrint = 0;
            PrintLegend(supportsStreaming, platform);
        }

        if (inputEscape.WasReleased(true))
        {
            ChromaAnimationAPI::StopAll();
            ChromaAnimationAPI::CloseAll();
            ChromaAnimationAPI::ClearAll();
            ChromaAnimationAPI::Uninit();
            break;
        }
		else if (inputPlatform.WasReleased(true))
		{
			ClearManualInput();
			platform = (platform + 1) % 4; //PC, AMAZON LUNA, MS GAME PASS, NVIDIA GFN
			PrintLegend(supportsStreaming, platform);
		}
        else if (inputUp.WasReleased(true))
        {
            ClearManualInput();
            if (supportsStreaming && _gSelection > -9)
            {
                --_gSelection;
            }
			else if (_gSelection > 1)
			{
				--_gSelection;
			}
			PrintLegend(supportsStreaming, platform);
			if (_gSelection >= 1)
            {
                ExecuteEffect(supportsStreaming, platform);
            }
		}
		

		else if (inputDown.WasReleased(true))
		{
			ClearManualInput();
			if (_gSelection < MAX_SELECTION)
			{
				_gSelection++;
			}
			PrintLegend(supportsStreaming, platform);
            if (_gSelection > 1)
            {
                ExecuteEffect(supportsStreaming, platform);
            }
		}

		bool hasManualInput = false;
		if (inputBackspace.WasReleased(true))
		{
			if (_gManualInput[1] != ' ')
			{
				_gManualInput[1] = ' ';
				hasManualInput = true;

			}
			else if (_gManualInput[0] != ' ')
			{
				_gManualInput[0] = ' ';
				hasManualInput = true;
			}
		}
		for (int i = 0; i < (int)size(numKeys); ++i)
		{
			if (numKeys[i].WasReleased(true) ||
				numpadKeys[i].WasReleased(true))
			{
				if (_gManualInput[0] != ' ')
				{
					_gManualInput[1] = numKeys[i].GetKey();
					hasManualInput = true;
				}
				else
				{
					_gManualInput[0] = numKeys[i].GetKey();
					hasManualInput = true;
				}
			}
		}
		if (hasManualInput)
		{
			int val = 0;
			if (_gManualInput[1] != ' ')
			{
				if (_gManualInput[0] >= '0' && _gManualInput[0] <= '9')
				{
					val = 10 * (_gManualInput[0] - '0');
				}
				if (_gManualInput[1] >= '0' && _gManualInput[1] <= '9')
				{
					val += _gManualInput[1] - '0';
				}
			}
			else if (_gManualInput[0] != ' ')
			{
				val = _gManualInput[0] - '0';
			}
			if (val <= MAX_SELECTION)
			{
				_gSelection = val;
			}
			PrintLegend(supportsStreaming, platform);
		}

		if (inputEnter.WasReleased(true))
		{
			PrintLegend(supportsStreaming, platform);
			ClearManualInput();

            ExecuteEffect(supportsStreaming, platform);

            if (_gSelection < 1)
            {
                PrintLegend(supportsStreaming, platform);
            }
		}
		Sleep(1);
	}

	Cleanup();

    return 0;
}

void ExportAnimation(const wchar_t* source, const wchar_t* destination)
{
	ChromaAnimationAPI::SaveAnimationName(source, destination);
}

void ExportAnimationSet(const wchar_t* source, const wchar_t* destination)
{
	wstring wSource = source;
	wstring wDestination = destination;

	ChromaAnimationAPI::SaveAnimationName((wSource+L"_ChromaLink.chroma").c_str(), (wDestination + L"_ChromaLink.chroma").c_str());
	ChromaAnimationAPI::SaveAnimationName((wSource + L"_Headset.chroma").c_str(), (wDestination + L"_Headset.chroma").c_str());
	ChromaAnimationAPI::SaveAnimationName((wSource + L"_Keyboard.chroma").c_str(), (wDestination + L"_Keyboard.chroma").c_str());
	ChromaAnimationAPI::SaveAnimationName((wSource + L"_Keypad.chroma").c_str(), (wDestination + L"_Keypad.chroma").c_str());
	ChromaAnimationAPI::SaveAnimationName((wSource + L"_Mouse.chroma").c_str(), (wDestination + L"_Mouse.chroma").c_str());
	ChromaAnimationAPI::SaveAnimationName((wSource + L"_Mousepad.chroma").c_str(), (wDestination + L"_Mousepad.chroma").c_str());
}

void ExecuteEffect(bool supportsStreaming, BYTE platform)
{
	// get current time
	high_resolution_clock::time_point timer = high_resolution_clock::now();

	switch (_gSelection)
	{
    case -9:
        if (supportsStreaming)
        {
			wstring strPlatform = L"PC";
			switch (platform)
			{
			case 0:
				strPlatform = L"PC";
				break;
			case 1:
				strPlatform = L"LUNA";
				break;
			case 2:
				strPlatform = L"GEFORCE_NOW";
				break;
			case 3:
				strPlatform = L"GAME_PASS";
				break;
			}
            ChromaAnimationAPI::CoreStreamGetAuthShortcode(_gShortcode, &_gLenShortcode, strPlatform.c_str(), L"CSDK Sample App 好");
        }
        break;
    case -8:
        if (supportsStreaming && _gLenShortcode > 0)
        {
            ChromaAnimationAPI::CoreStreamGetId(_gShortcode, _gStreamId, &_gLenStreamId);
        }
        break;
    case -7:
        if (supportsStreaming && _gLenShortcode > 0)
        {
            ChromaAnimationAPI::CoreStreamGetKey(_gShortcode, _gStreamKey, &_gLenStreamKey);
        }
        break;
    case -6:
        if (supportsStreaming && _gLenShortcode > 0)
        {
            if (ChromaAnimationAPI::CoreStreamReleaseShortcode(_gShortcode))
            {
                memset(_gShortcode, 0, size(_gShortcode));
                _gLenShortcode = 0;
            }
        }
        break;
    case -5:
        if (supportsStreaming &&
            _gLenStreamId > 0 && _gLenStreamKey > 0)
        {
            ChromaAnimationAPI::CoreStreamBroadcast(_gStreamId, _gStreamKey);
        }
        break;
    case -4:
        if (supportsStreaming)
        {
            ChromaAnimationAPI::CoreStreamBroadcastEnd();
        }
        break;
    case -3:
        if (supportsStreaming &&
            _gLenStreamId > 0)
        {
            unsigned long long timestamp = 0;
            ChromaAnimationAPI::CoreStreamWatch(_gStreamId, timestamp);
        }
        break;
    case -2:
        if (supportsStreaming)
        {
            ChromaAnimationAPI::CoreStreamWatchEnd();
        }
        break;
    case -1:
        if (supportsStreaming)
        {
            ChromaAnimationAPI::CoreStreamGetFocus(g_Focus, &g_LenFocus);
        }
        break;
    case 0:
        if (supportsStreaming)
        {
            ChromaAnimationAPI::CoreStreamSetFocus(g_FocusGuid);
            ChromaAnimationAPI::CoreStreamGetFocus(g_Focus, &g_LenFocus);
        }
        break;
    case 1:
        ShowEffect1();
        ShowEffect1ChromaLink();
        ShowEffect1Headset();
        ShowEffect1Keypad();
        ShowEffect1Mousepad();
        ShowEffect1Mouse();
		ExportAnimation(L"Animations/BlackAndWhiteRainbow_ChromaLink.chroma", L"Exports/Effect1_ChromaLink.chroma");
		ExportAnimation(L"Animations/BlackAndWhiteRainbow_Headset.chroma", L"Exports/Effect1_Headset.chroma");
		ExportAnimation(L"Animations/Blank_Keyboard.chroma", L"Exports/Effect1_Keyboard.chroma");
		ExportAnimation(L"Animations/BlackAndWhiteRainbow_Keypad.chroma", L"Exports/Effect1_Keypad.chroma");
		ExportAnimation(L"Animations/BlackAndWhiteRainbow_Mouse.chroma", L"Exports/Effect1_Mouse.chroma");
		ExportAnimation(L"Animations/BlackAndWhiteRainbow_Mousepad.chroma", L"Exports/Effect1_Mousepad.chroma");
        break;
    case 2:
        ShowEffect2();
        ShowEffect2ChromaLink();
        ShowEffect2Headset();
        ShowEffect2Keypad();
        ShowEffect2Mousepad();
        ShowEffect2Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect2", L"Exports/Effect2");
        break;
    case 3:
        ShowEffect3();
        ShowEffect3ChromaLink();
        ShowEffect3Headset();
        ShowEffect3Keypad();
        ShowEffect3Mousepad();
        ShowEffect3Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect3", L"Exports/Effect3");
        break;
    case 4:
        ShowEffect4();
        ShowEffect4ChromaLink();
        ShowEffect4Headset();
        ShowEffect4Keypad();
        ShowEffect4Mousepad();
        ShowEffect4Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect4", L"Exports/Effect4");
        break;
    case 5:
        ShowEffect5();
        ShowEffect5ChromaLink();
        ShowEffect5Headset();
        ShowEffect5Keypad();
        ShowEffect5Mousepad();
        ShowEffect5Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect5", L"Exports/Effect5");
        break;
    case 6:
        ShowEffect6();
        ShowEffect6ChromaLink();
        ShowEffect6Headset();
        ShowEffect6Keypad();
        ShowEffect6Mousepad();
        ShowEffect6Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect6", L"Exports/Effect6");
        break;
    case 7:
        ShowEffect7();
        ShowEffect7ChromaLink();
        ShowEffect7Headset();
        ShowEffect7Keypad();
        ShowEffect7Mousepad();
        ShowEffect7Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect7", L"Exports/Effect7");
        break;
    case 8:
        ShowEffect8();
        ShowEffect8ChromaLink();
        ShowEffect8Headset();
        ShowEffect8Keypad();
        ShowEffect8Mousepad();
        ShowEffect8Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect8", L"Exports/Effect8");
        break;
    case 9:
        ShowEffect9();
        ShowEffect9ChromaLink();
        ShowEffect9Headset();
        ShowEffect9Keypad();
        ShowEffect9Mousepad();
        ShowEffect9Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect9", L"Exports/Effect9");
        break;
    case 10:
        ShowEffect10();
        ShowEffect10ChromaLink();
        ShowEffect10Headset();
        ShowEffect10Keypad();
        ShowEffect10Mousepad();
        ShowEffect10Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect10", L"Exports/Effect10");
        break;
    case 11:
        ShowEffect11();
        ShowEffect11ChromaLink();
        ShowEffect11Headset();
        ShowEffect11Keypad();
        ShowEffect11Mousepad();
        ShowEffect11Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect11", L"Exports/Effect11");
        break;
    case 12:
        ShowEffect12();
        ShowEffect12ChromaLink();
        ShowEffect12Headset();
        ShowEffect12Keypad();
        ShowEffect12Mousepad();
        ShowEffect12Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect12", L"Exports/Effect12");
        break;
    case 13:
        ShowEffect13();
        ShowEffect13ChromaLink();
        ShowEffect13Headset();
        ShowEffect13Keypad();
        ShowEffect13Mousepad();
        ShowEffect13Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect13", L"Exports/Effect13");
        break;
    case 14:
        ShowEffect14();
        ShowEffect14ChromaLink();
        ShowEffect14Headset();
        ShowEffect14Keypad();
        ShowEffect14Mousepad();
        ShowEffect14Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect14", L"Exports/Effect14");
        break;
    case 15:
        ShowEffect15();
        ShowEffect15ChromaLink();
        ShowEffect15Headset();
        ShowEffect15Keypad();
        ShowEffect15Mousepad();
        ShowEffect15Mouse();
		ExportAnimationSet(L"GameSampleAnimations/Effect15", L"Exports/Effect15");
        break;
	}

	// get time in seconds
	duration<double, milli> time_span = high_resolution_clock::now() - timer;
	float deltaTime = (float)(time_span.count() / 1000.0f);
	fprintf(stdout, "Elapsed time: %f\r\n\r\n", deltaTime);
}
